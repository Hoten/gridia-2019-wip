/* Auto generated by build/build-protocol.js */

type AdminSetFloorMessage = {
    type: "adminSetFloor";
    args: ClientToServerProtocol.Params.AdminSetFloor;
};
type AdminSetItemMessage = {
    type: "adminSetItem";
    args: ClientToServerProtocol.Params.AdminSetItem;
};
type CloseContainerMessage = {
    type: "closeContainer";
    args: ClientToServerProtocol.Params.CloseContainer;
};
type MoveMessage = {
    type: "move";
    args: ClientToServerProtocol.Params.Move;
};
type MoveItemMessage = {
    type: "moveItem";
    args: ClientToServerProtocol.Params.MoveItem;
};
type RegisterMessage = {
    type: "register";
    args: ClientToServerProtocol.Params.Register;
};
type RequestContainerMessage = {
    type: "requestContainer";
    args: ClientToServerProtocol.Params.RequestContainer;
};
type RequestCreatureMessage = {
    type: "requestCreature";
    args: ClientToServerProtocol.Params.RequestCreature;
};
type RequestPartitionMessage = {
    type: "requestPartition";
    args: ClientToServerProtocol.Params.RequestPartition;
};
type RequestSectorMessage = {
    type: "requestSector";
    args: ClientToServerProtocol.Params.RequestSector;
};
type TameMessage = {
    type: "tame";
    args: ClientToServerProtocol.Params.Tame;
};
type UseMessage = {
    type: "use";
    args: ClientToServerProtocol.Params.Use;
};
type ChatMessage = {
    type: "chat";
    args: ClientToServerProtocol.Params.Chat;
};

export type Message = AdminSetFloorMessage | AdminSetItemMessage | CloseContainerMessage | MoveMessage | MoveItemMessage | RegisterMessage | RequestContainerMessage | RequestCreatureMessage | RequestPartitionMessage | RequestSectorMessage | TameMessage | UseMessage | ChatMessage;

export function adminSetFloor({ floor, ...loc }: ClientToServerProtocol.Params.AdminSetFloor): AdminSetFloorMessage {
    return { type: "adminSetFloor", args: arguments[0] };
}
export function adminSetItem({ item, ...loc }: ClientToServerProtocol.Params.AdminSetItem): AdminSetItemMessage {
    return { type: "adminSetItem", args: arguments[0] };
}
export function closeContainer({ containerId }: ClientToServerProtocol.Params.CloseContainer): CloseContainerMessage {
    return { type: "closeContainer", args: arguments[0] };
}
export function move({ ...loc }: ClientToServerProtocol.Params.Move): MoveMessage {
    return { type: "move", args: arguments[0] };
}
export function moveItem({ from, to }: ClientToServerProtocol.Params.MoveItem): MoveItemMessage {
    return { type: "moveItem", args: arguments[0] };
}
export function register({ name }: ClientToServerProtocol.Params.Register): RegisterMessage {
    return { type: "register", args: arguments[0] };
}
export function requestContainer({ containerId, loc }: ClientToServerProtocol.Params.RequestContainer): RequestContainerMessage {
    return { type: "requestContainer", args: arguments[0] };
}
export function requestCreature({ id }: ClientToServerProtocol.Params.RequestCreature): RequestCreatureMessage {
    return { type: "requestCreature", args: arguments[0] };
}
export function requestPartition({ w }: ClientToServerProtocol.Params.RequestPartition): RequestPartitionMessage {
    return { type: "requestPartition", args: arguments[0] };
}
export function requestSector({ ...loc }: ClientToServerProtocol.Params.RequestSector): RequestSectorMessage {
    return { type: "requestSector", args: arguments[0] };
}
export function tame({ creatureId }: ClientToServerProtocol.Params.Tame): TameMessage {
    return { type: "tame", args: arguments[0] };
}
export function use({ toolIndex, loc, usageIndex }: ClientToServerProtocol.Params.Use): UseMessage {
    return { type: "use", args: arguments[0] };
}
export function chat({ to, message }: ClientToServerProtocol.Params.Chat): ChatMessage {
    return { type: "chat", args: arguments[0] };
}